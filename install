#!/usr/bin/env python3
import argparse
import logging
import os
import re
import shlex
import subprocess
import sys
import textwrap
from collections import defaultdict


logger = logging.getLogger()


def main():
    args = parse_args()
    if args.verbose:
        logger.setLevel(
            {
                0: logging.ERROR,
                1: logging.INFO,
                2: logging.DEBUG,
            }[min(args.verbose, 2)]
        )
    config = create_config(args)

    install_tmux_configs(args.env, config)
    logger.info('tmux configs installed!')

    install_vim_configs(config)
    logger.info('vim configs installed!')

    install_bash_configs(args.env, config)
    logger.info('bash configs installed!')

    install_git_configs()
    logger.info('git configs installed!')


def parse_args(argv=None):
    parser = argparse.ArgumentParser()

    parser.add_argument(
        'env',
        help=(
            'Each environment is slightly different. This specifies '
            'the host OS, so that it can install compatible configs.'
        ),
        choices=get_env_options(),
    )
    parser.add_argument(
        '-v',
        '--verbose',
        help='Configures verbosity of logs.',
        action='count',
    )

    return parser.parse_args()


def create_config(args):
    """
    :type args: argparse.Namespace 
    """
    output = {}

    # Enable FZF if the binary exists.
    try:
        subprocess.check_output(
            'which fzf'.split(),
            stderr=subprocess.DEVNULL,
        )

        output['fzf'] = True
    except subprocess.CalledProcessError:
        output['fzf'] = False

    try:
        subprocess.check_output(
            'which rg'.split(),
            stderr=subprocess.DEVNULL,
        )

        output['rg'] = True
    except subprocess.CalledProcessError:
        output['rg'] = False

    return output


def install_tmux_configs(env, config):
    """
    :type env: str
    :param env: specifies host OS

    :type config: dict
    """
    # Install configs
    content = get_env_configs(
        env=env,
        base_file='configs/common/tmux/tmux.conf',
        source_cmd='source-file',
        list_of_files=(
            'tmux.conf',
            'tmux-colors.conf',
        ),
    )

    with open(os.path.expanduser('~/.tmux.conf'), 'w') as f:
        f.write(content)

    # Install plugins and custom scripts
    try:
        os.mkdir(os.path.expanduser('~/.tmux'))
    except OSError:
        pass

    force_create_symlink(
        get_path('configs/common/tmux/scripts'),
        os.path.expanduser('~/.tmux/scripts'),
    )

    tpm_path = os.path.expanduser('~/.tmux/plugins/tpm')
    if not os.path.isdir(tpm_path):
        git(
            'clone',
            'https://github.com/tmux-plugins/tpm',
            tpm_path,
        )

    tmux_pane_id = os.environ.get('TMUX_PANE')
    if tmux_pane_id:
        subprocess.call(
            shlex.split(
                'tmux source-file {}'.format(
                    os.path.expanduser('~/.tmux.conf')
                ),
            )
        )
        subprocess.call(
            shlex.split(
                'tmux send-keys -t "{}" "{}" Enter'.format(
                    tmux_pane_id,
                    os.path.expanduser(
                        '~/.tmux/plugins/tpm/scripts/install_plugins.sh'
                    ),
                )
            )
        )
    else:
        subprocess.call(
            shlex.split(
                'tmux new-session "{}"'.format(
                    os.path.expanduser(
                        '~/.tmux/plugins/tpm/scripts/install_plugins.sh'
                    ),
                )
            )
        )


def install_vim_configs(config):
    """
    :type config: dict
    """
    # Install configs
    content = textwrap.dedent("""
        source {plugins}
        source {base}
        source {custom_functions}
    """)[1:].format(
        base=get_path('configs/common/vim/vimrc'),
        custom_functions=get_path('configs/common/vim/vim-functions.vim'),
        plugins=get_path('configs/common/vim/vim-plugins.vim'),
    )

    with open(os.path.expanduser('~/.vimrc'), 'w') as f:
        f.write(content)

    # More colors
    try:
        os.mkdir(os.path.expanduser('~/.vim'))
    except OSError:
        pass

    force_create_symlink(
        get_path('configs/common/vim/colors'),
        os.path.expanduser('~/.vim/colors'),
    )

    # Install plugins
    download_file(
        'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim',
        os.path.expanduser('~/.vim/autoload/plug.vim'),
    )
    if config['fzf']:
        download_file(
            'https://raw.githubusercontent.com/junegunn/fzf/master/plugin/fzf.vim',
            os.path.expanduser('~/.vim/autoload/fzf.vim'),
        )

    subprocess.call('vim +PlugInstall +qall'.split())


def install_bash_configs(env, config):
    """
    :type env: str
    :param env: specifies host OS

    :type config: dict
    """
    # Install configs
    content = get_env_configs(
        env=env,
        base_file='configs/common/bash/bash_profile',
        source_cmd='source',
        list_of_files=(
            'bash_profile',
        ),
    )
    content += textwrap.dedent("""

        ##########################
        # This is auto-generated #
        ##########################
        {scripts}
        {fzf}

        ############################
        # End auto-generation code #
        ############################
    """).format(
        scripts=render_template(
            get_path('configs/common/bash/scripts.tmpl'),
            scripts=get_path('scripts'),
            root=get_path('.'),
        ),
        fzf=render_template(
            get_path('configs/common/bash/fzf.tmpl'),
            scripts=get_path('scripts'),
            has_rg='true' if config['rg'] else 'false',
        ) if config['fzf'] else '',

    )

    with open(os.path.expanduser('~/.bash_profile'), 'w') as f:
        f.write(content)


def install_git_configs():
    force_create_symlink(
        get_path('configs/.gitconfig'),
        os.path.expanduser('~/.gitconfig'),
    )


def get_env_options():
    for root, dirs, filenames in os.walk(get_path('configs/env')):
        return dirs


def get_env_configs(env, base_file, source_cmd, list_of_files):
    """
    :type env: str
    :param env: specifies host OS

    :type base_file: str
    :param base_file: this will always be imported, even if no environment
        specific config files are available.

    :type source_cmd: str
    :param source_cmd: command used to source external files.
        e.g. bash uses `source`

    :type list_of_files: iterable

    :rtype: str
    :returns: content to write to file
    """
    content = '{} {}'.format(
        source_cmd,
        get_path(base_file),
    )

    for filename in list_of_files:
        for path in [
            'configs/env/{}/{}'.format(
                env,
                filename,
            ),
            'private/configs/{}'.format(filename),
        ]:
            path = get_path(path)
            if os.path.isfile(path):
                content += '\n{} {}'.format(source_cmd, path)

    return content


def render_template(template_file, **kwargs):
    """
    Super simple, no dependency template engine.
    Assumes valid input.

    :type template_file: str
    :param template_file: filename, ending in .tmpl
    """
    regex = re.compile('{{([ \w]+)}}')

    lines = []
    variables = set()
    locations = defaultdict(list)
    with open(template_file) as f:
        index = 0
        for line in f.readlines():
            line = line.rstrip()
            if line.startswith('#!'):
                continue

            matches = regex.search(line)
            if matches:
                for match in matches.groups():
                    name = match.strip()
                    variables.add(name)
                    locations[index].append(name)

            lines.append(line)
            index += 1

    if variables != set(kwargs.keys()):
        missing_keys = variables - set(kwargs.keys())
        raise ValueError(
            'Missing parameters: {}'.format(
                ', '.join(missing_keys)
            )
        )

    output = []
    for index, line in enumerate(lines):
        try:
            for name in locations[index]:
                for match in re.search(r'({{ *' + name + r' *}})', line).groups():
                    line = line.replace(
                        match,
                        kwargs[name],
                    )
        except IndexError:
            pass

        output.append(line)

    return '\n'.join(output)


def git(*args):
    try:
        return subprocess.check_output(
            [
                'git',
                *args,
            ],
            stderr=subprocess.STDOUT,
        )
    except subprocess.CalledProcessError as e:
        logger.error(e.output.decode('utf-8').strip())


def force_create_symlink(src, dest):
    try:
        os.symlink(src, dest)
    except FileExistsError:
        os.remove(dest)
        os.symlink(src, dest)


def download_file(src, dest):
    """
    :type src: str
    :param src: url to download

    :type dest: str
    :param dest: path to save file
    """
    subprocess.call(
        [
            'curl',
            '--fail',       # fail silently, on error
            '--location',   # follow redirects
            '--create-dirs',

            '--output',
            dest,
            src,
        ],
        stderr=subprocess.DEVNULL,
    )


def get_path(path_to_file):
    return os.path.abspath(
        os.path.join(
            __file__,
            '..',
            path_to_file,
        )
    )


if __name__ == '__main__':
    logger.handlers = []
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(
        logging.Formatter(
            '[%(levelname)s]\t%(message)s',
        )
    )
    logger.addHandler(handler)

    main()
